<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd" >
<sqlMap namespace="student" >
  <resultMap id="BaseResultMap" class="com.demo.model.Student" >
    <result column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="birthday" property="birthday" jdbcType="DATE" />
    <result column="email" property="email" jdbcType="VARCHAR" />
  </resultMap>
  
  <sql id="student.mysql_Pagination_Limit" >
    <dynamic >
      <isNotEmpty property="mysqlOffset" >
        <isNotEmpty property="mysqlLength" >
          <![CDATA[ limit #mysqlOffset# , #mysqlLength# ]]>
        </isNotEmpty>
      </isNotEmpty>
    </dynamic>
  </sql>
  
  <sql id="student.Example_Where_Clause" >
    <iterate property="oredCriteria" conjunction="or" prepend="where" removeFirstPrepend="iterate" >
      <isEqual property="oredCriteria[].valid" compareValue="true" >
        (
        <iterate prepend="and" property="oredCriteria[].criteriaWithoutValue" conjunction="and" >
          $oredCriteria[].criteriaWithoutValue[]$
        </iterate>
        <iterate prepend="and" property="oredCriteria[].criteriaWithSingleValue" conjunction="and" >
          $oredCriteria[].criteriaWithSingleValue[].condition$ #oredCriteria[].criteriaWithSingleValue[].value#
        </iterate>
        <iterate prepend="and" property="oredCriteria[].criteriaWithListValue" conjunction="and" >
          $oredCriteria[].criteriaWithListValue[].condition$
          <iterate property="oredCriteria[].criteriaWithListValue[].values" open="(" close=")" conjunction="," >
            #oredCriteria[].criteriaWithListValue[].values[]#
          </iterate>
        </iterate>
        <iterate prepend="and" property="oredCriteria[].criteriaWithBetweenValue" conjunction="and" >
          $oredCriteria[].criteriaWithBetweenValue[].condition$
          #oredCriteria[].criteriaWithBetweenValue[].values[0]# and
          #oredCriteria[].criteriaWithBetweenValue[].values[1]#
        </iterate>
        )
      </isEqual>
    </iterate>
  </sql>
  
  <sql id="student.Base_Column_List" >
    id, name, sex, age, address, birthday, email
  </sql>
  
  <select id="student.selectByExample" resultMap="BaseResultMap" parameterClass="com.demo.model.StudentExample" >
    select
    <isParameterPresent >
      <isEqual property="distinct" compareValue="true" >
        distinct
      </isEqual>
    </isParameterPresent>
    <include refid="student.Base_Column_List" />
    from student
    <isParameterPresent >
      <include refid="student.Example_Where_Clause" />
      <isNotNull property="orderByClause" >
        order by $orderByClause$
      </isNotNull>
    </isParameterPresent>
    <include refid="student.mysql_Pagination_Limit" />
  </select>
  
  <select id="student.selectByPrimaryKey" resultMap="BaseResultMap" parameterClass="com.demo.model.Student" >
    select 
    <include refid="student.Base_Column_List" />
    from student
    where id = #id:INTEGER#
  </select>
  
  <delete id="student.deleteByPrimaryKey" parameterClass="com.demo.model.Student" >
    delete from student
    where id = #id:INTEGER#
  </delete>
  
  <delete id="student.deleteByExample" parameterClass="com.demo.model.StudentExample" >
    delete from student
    <include refid="student.Example_Where_Clause" />
  </delete>
  
  <insert id="student.insert" parameterClass="com.demo.model.Student" >
    insert into student (id, name, sex, age, address, 
      birthday, email)
    values (#id:INTEGER#, #name:VARCHAR#, #sex:VARCHAR#, #age:INTEGER#, #address:VARCHAR#, 
      #birthday:DATE#, #email:VARCHAR#)
  </insert>
  
  <insert id="student.insertSelective" parameterClass="com.demo.model.Student" >
    insert into student
    <dynamic prepend="(" >
      <isNotNull prepend="," property="id" >
        id
      </isNotNull>
      <isNotNull prepend="," property="name" >
        name
      </isNotNull>
      <isNotNull prepend="," property="sex" >
        sex
      </isNotNull>
      <isNotNull prepend="," property="age" >
        age
      </isNotNull>
      <isNotNull prepend="," property="address" >
        address
      </isNotNull>
      <isNotNull prepend="," property="birthday" >
        birthday
      </isNotNull>
      <isNotNull prepend="," property="email" >
        email
      </isNotNull>
      )
    </dynamic>
    values
    <dynamic prepend="(" >
      <isNotNull prepend="," property="id" >
        #id:INTEGER#
      </isNotNull>
      <isNotNull prepend="," property="name" >
        #name:VARCHAR#
      </isNotNull>
      <isNotNull prepend="," property="sex" >
        #sex:VARCHAR#
      </isNotNull>
      <isNotNull prepend="," property="age" >
        #age:INTEGER#
      </isNotNull>
      <isNotNull prepend="," property="address" >
        #address:VARCHAR#
      </isNotNull>
      <isNotNull prepend="," property="birthday" >
        #birthday:DATE#
      </isNotNull>
      <isNotNull prepend="," property="email" >
        #email:VARCHAR#
      </isNotNull>
      )
    </dynamic>
  </insert>
  
  <select id="student.countByExample" parameterClass="com.demo.model.StudentExample" resultClass="java.lang.Integer" >
    select count(*) from student
    <include refid="student.Example_Where_Clause" />
  </select>
  
  <update id="student.updateByExampleSelective" >
    update student
    <dynamic prepend="set" >
      <isNotNull prepend="," property="record.id" >
        id = #record.id:INTEGER#
      </isNotNull>
      <isNotNull prepend="," property="record.name" >
        name = #record.name:VARCHAR#
      </isNotNull>
      <isNotNull prepend="," property="record.sex" >
        sex = #record.sex:VARCHAR#
      </isNotNull>
      <isNotNull prepend="," property="record.age" >
        age = #record.age:INTEGER#
      </isNotNull>
      <isNotNull prepend="," property="record.address" >
        address = #record.address:VARCHAR#
      </isNotNull>
      <isNotNull prepend="," property="record.birthday" >
        birthday = #record.birthday:DATE#
      </isNotNull>
      <isNotNull prepend="," property="record.email" >
        email = #record.email:VARCHAR#
      </isNotNull>
    </dynamic>
    <isParameterPresent >
      <include refid="student.Example_Where_Clause" />
    </isParameterPresent>
  </update>
  
  <update id="student.updateByExample" >
    update student
    set id = #record.id:INTEGER#,
      name = #record.name:VARCHAR#,
      sex = #record.sex:VARCHAR#,
      age = #record.age:INTEGER#,
      address = #record.address:VARCHAR#,
      birthday = #record.birthday:DATE#,
      email = #record.email:VARCHAR#
    <isParameterPresent >
      <include refid="student.Example_Where_Clause" />
    </isParameterPresent>
  </update>
  
  <update id="student.updateByPrimaryKeySelective" parameterClass="com.demo.model.Student" >
    update student
    <dynamic prepend="set" >
      <isNotNull prepend="," property="name" >
        name = #name:VARCHAR#
      </isNotNull>
      <isNotNull prepend="," property="sex" >
        sex = #sex:VARCHAR#
      </isNotNull>
      <isNotNull prepend="," property="age" >
        age = #age:INTEGER#
      </isNotNull>
      <isNotNull prepend="," property="address" >
        address = #address:VARCHAR#
      </isNotNull>
      <isNotNull prepend="," property="birthday" >
        birthday = #birthday:DATE#
      </isNotNull>
      <isNotNull prepend="," property="email" >
        email = #email:VARCHAR#
      </isNotNull>
    </dynamic>
    where id = #id:INTEGER#
  </update>
  
  <update id="student.updateByPrimaryKey" parameterClass="com.demo.model.Student" >
    update student
    set name = #name:VARCHAR#,
      sex = #sex:VARCHAR#,
      age = #age:INTEGER#,
      address = #address:VARCHAR#,
      birthday = #birthday:DATE#,
      email = #email:VARCHAR#
    where id = #id:INTEGER#
  </update>
  
  
</sqlMap>